<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_Card</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CardName        = obj_CurrentCard.CardName;
//CardID          = obj_CurrentCard.CardCost;
//CardDamage      = obj_CurrentCard.CardDamage;
//CardNmbAtHand   = obj_CurrentCard.CardNmbAtHand;
Moving              = false;
MoveSpeedX          = 0;
MoveSpeedY          = 0;
DestinationX        = x;
DestinationY        = y;

depth               = obj_GameController.PlayedCardDepth;
CardSpIndex = 0;
CardID              = obj_CurrentCard.CardID;
CardRes1            = obj_CurrentCard.CardRes1;
CardRes2            = obj_CurrentCard.CardRes2;
CardRes3            = obj_CurrentCard.CardRes3;
CardName            = obj_CurrentCard.CardName;

CardSelfTowerHp     = obj_CurrentCard.CardSelfTowerHp;
CardEnemyTowerHp    = obj_CurrentCard.CardEnemyTowerHp;
CardSelfWallHp      = obj_CurrentCard.CardSelfWallHp;
CardEnemyWallHp     = obj_CurrentCard.CardEnemyWallHp;
CardSelfHp          = obj_CurrentCard.CardSelfHp;
CardEnemyHp         = obj_CurrentCard.CardEnemyHp;


CardSelfRes1        = obj_CurrentCard.CardSelfRes1; 
CardSelfRes2        = obj_CurrentCard.CardSelfRes2;
CardSelfRes3        = obj_CurrentCard.CardSelfRes3;
CardSelfGen1        = obj_CurrentCard.CardSelfGen1;
CardSelfGen2        = obj_CurrentCard.CardSelfGen2;
CardSelfGen3        = obj_CurrentCard.CardSelfGen3;

CardEnemyRes1       = obj_CurrentCard.CardEnemyRes1; 
CardEnemyRes2       = obj_CurrentCard.CardEnemyRes2;
CardEnemyRes3       = obj_CurrentCard.CardEnemyRes3;
CardEnemyGen1       = obj_CurrentCard.CardEnemyGen1;
CardEnemyGen2       = obj_CurrentCard.CardEnemyGen2;
CardEnemyGen3       = obj_CurrentCard.CardEnemyGen3;

CardState           = obj_GameController.CardVisionState;
if string_count("discard", CardState) &gt; 0
{
    CardSpIndex = 1;       
}







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Moving
{
    
    x += MoveSpeedX;
    y += MoveSpeedY;    
    
    
    if abs(DestinationX - x) &lt; abs(MoveSpeedX)
    {
        MoveSpeedX = (DestinationX - x);   
    }
    if abs(DestinationY - y) &lt; abs(MoveSpeedY)
    {
        MoveSpeedY = (DestinationY - y);   
    }
    
    else if (abs(DestinationX - x) &lt; 1) and (abs(DestinationY - y) &lt; 1)
    {
        x = DestinationX;
        y = DestinationY;
        Moving = false;
        MoveSpeedX = 0;
        MoveSpeedY = 0;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sp_Card,CardSpIndex, x, y);
draw_set_colour(c_yellow);
draw_set_font(font1);
draw_set_halign(fa_center);
CardNameText = string_replace(CardName, " ", "#");
CardNameText = string_replace(CardNameText, "(newcard)", "");
draw_text(x, y + 40, CardNameText);
description = ""; 

draw_set_colour(c_white);
draw_text(x, y - 135, string(CardRes1) + "  " + string(CardRes2) + "  " + string(CardRes3));
//Формирование описалова
draw_set_colour(c_black);
if CardSelfTowerHp = CardEnemyTowerHp and CardSelfTowerHp &lt;&gt; 0
{
    description += script_execute(GetValueWithPM, CardSelfTowerHp) + " к башням#всех игроков#"    
}
else
{
    if CardSelfTowerHp &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfTowerHp) + " к башне#";}  
    if CardEnemyTowerHp &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyTowerHp) + " к башне врага#";}    
}





GrSelfRes = false;
GrEnemyRes = false;
GrSelfGen = false;
GrEnemyGen = false;
//РЕСУРСЫ 
if  CardSelfRes1 &lt;&gt; 0 or CardEnemyRes1 &lt;&gt; 0  
{

    if  CardSelfRes1 = CardSelfRes2 
        and CardSelfRes1 = CardSelfRes3 
        and CardSelfRes1 = CardEnemyRes1 
        and CardSelfRes1 = CardEnemyRes2
        and CardSelfRes1 = CardEnemyRes3
    {    
        description += script_execute(GetValueWithPM, CardSelfRes1) + " к ресурсам#всех игроков#"
        GrSelfRes = true;
        GrEnemyRes = true;
        
    } 
    else
    { 
        if  CardSelfRes1 = CardSelfRes2 
            and CardSelfRes1 = CardSelfRes3
            and CardSelfRes1 &lt;&gt; 0
        {    
            description += script_execute(GetValueWithPM, CardSelfRes1) + " к ресурсам#"
            GrSelfRes = true;
        }
        
        if  CardEnemyRes1 = CardEnemyRes2 
            and CardEnemyRes1 = CardEnemyRes3
            and CardEnemyRes1 &lt;&gt; 0
        {    
            description += script_execute(GetValueWithPM, CardEnemyRes1) + " к ресурсам#врага#"
            GrEnemyRes = true;
        }
    }
    
} 

if !GrSelfRes //Если ресурсы не сгруппировались по условиям выше, то добавляем каждый рес. отдельно
{ 
    if CardSelfRes1 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfRes1)+ " к 1 ресурсу #"}
    if CardSelfRes2 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfRes2)+ " к 2 ресурсу #"}
    if CardSelfRes3 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfRes3)+ " к 3 ресурсу #"}
}

if !GrEnemyRes
{
    if CardEnemyRes1 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyRes1)+ " к 1 ресурсу #врага#"}
    if CardEnemyRes2 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyRes2)+ " к 2 ресурсу #врага#"}
    if CardEnemyRes3 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyRes3)+ " к 3 ресурсу #врага#"}
}

//ГЕНЕРАТОРЫ ПРИРОСТ
if  CardSelfGen1 &lt;&gt; 0 or CardEnemyGen1 &lt;&gt; 0  
{

    if  CardSelfGen1 = CardSelfGen2 
        and CardSelfGen1 = CardSelfGen3 
        and CardSelfGen1 = CardEnemyGen1 
        and CardSelfGen1 = CardEnemyGen2
        and CardSelfGen1 = CardEnemyGen3
    {    
        description += script_execute(GetValueWithPM, CardSelfGen1) + " к приросту#всех игроков#"
        GrSelfGen = true;
        GrEnemyGen = true;
        
    }
    else
    {  
        if  CardSelfGen1 = CardSelfGen2 
            and CardSelfGen1 = CardSelfGen3
            and CardSelfGen1 &lt;&gt; 0
        {    
            description += script_execute(GetValueWithPM, CardSelfGen1) + " к приросту#"
            GrSelfGen = true;
        }
        
        if  CardEnemyGen1 = CardEnemyGen2 
            and CardEnemyGen1 = CardEnemyGen3
            and CardEnemyGen1 &lt;&gt; 0
        {    
            description += script_execute(GetValueWithPM, CardEnemyGen1) + " к приросту#врага#"
            GrEnemyGen = true;
        }
    }
} 

if !GrSelfGen
{
    if CardSelfGen1 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfGen1)+ " к 1 приросту#"}
    if CardSelfGen2 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfGen2)+ " к 2 приросту#"}
    if CardSelfGen3 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfGen3)+ " к 3 приросту#"}
}

if !GrEnemyGen
{
    if CardEnemyGen1 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyGen1)+ " к 1 приросту#врага#"}
    if CardEnemyGen2 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyGen2)+ " к 2 приросту#врага#"}
    if CardEnemyGen3 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyGen3)+ " к 3 приросту#врага#"}
}

if CardSelfWallHp = CardEnemyWallHp and CardSelfWallHp &lt;&gt; 0 
{
    description += script_execute(GetValueWithPM, CardSelfWallHp)+ " ко всем стенам#"    
}
else
{
    if CardSelfWallHp &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfWallHp)+ " к стене#";}
    if CardEnemyWallHp &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyWallHp) + " к стене врага#";}
}

if CardSelfHp = CardEnemyHp and CardSelfHp &gt; 0
{
    description += string(abs(script_execute(GetValueWithPM, CardSelfHp)))+ " урона#всем игрокам#"; 
}
else
{
    if CardSelfHp   &lt;&gt; 0 {description += string(abs(script_execute(GetValueWithPM, CardSelfHp))) + " урона себе#";}
    if CardEnemyHp  &lt;&gt; 0 {description += string(abs(script_execute(GetValueWithPM, CardEnemyHp))) + " урона#";}    
}

draw_set_font(font2);
draw_set_colour(c_black);
draw_text(x, y + 100, description);




 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
