<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_Card</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CardName        = obj_CurrentCard.CardName;
//CardID          = obj_CurrentCard.CardCost;
//CardDamage      = obj_CurrentCard.CardDamage;
//CardNmbAtHand   = obj_CurrentCard.CardNmbAtHand;

CardSpIndex = 0;
CardID              = obj_CurrentCard.CardID;
CardElem            = obj_CurrentCard.CardElem;
CardCost            = obj_CurrentCard.CardCost;
CardName            = obj_CurrentCard.CardName;
CardSelfTowerHp     = obj_CurrentCard.CardSelfTowerHp;
CardEnemyTowerHp    = obj_CurrentCard.CardEnemyTowerHp;
CardNmbAtHand       = obj_CurrentCard.CardNmbAtHand;
AtHand              = obj_CurrentCard.AtHand;

CardSelfRes1        = obj_CurrentCard.CardSelfRes1; 
CardSelfRes2        = obj_CurrentCard.CardSelfRes2;
CardSelfRes3        = obj_CurrentCard.CardSelfRes3;
CardSelfGen1        = obj_CurrentCard.CardSelfGen1;
CardSelfGen2        = obj_CurrentCard.CardSelfGen2;
CardSelfGen3        = obj_CurrentCard.CardSelfGen3;

CardEnemyRes1       = obj_CurrentCard.CardEnemyRes1; 
CardEnemyRes2       = obj_CurrentCard.CardEnemyRes2;
CardEnemyRes3       = obj_CurrentCard.CardEnemyRes3;
CardEnemyGen1       = obj_CurrentCard.CardEnemyGen1;
CardEnemyGen2       = obj_CurrentCard.CardEnemyGen2;
CardEnemyGen3       = obj_CurrentCard.CardEnemyGen3;

CardSelfWallHp      = obj_CurrentCard.CardSelfWallHp;
CardEnemyWallHp     = obj_CurrentCard.CardEnemyWallHp;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if depth &gt; obj_Blocker.depth {exit;}

var TempCardSpIndex = CardSpIndex;
var TempID = real(CardID);

with (obj_Deck)
{

    if Active //Находим активную колоду
    {
    
        if TempCardSpIndex = 0 //Добавляем карту в колоду
        {
            if CardsInDeck = 15
            {
                script_execute(ShowMiniWarn, "Deck is full");
            }
            else
            {
                CardsInDeck +=1;
                for (var i = 0; i &lt;= 14; i +=1)
                {
                    
                    if CardsID[i] = 0
                    {
                        CardsID[i] = real(TempID)
                        break;    
                    }
                
                } 
                btn_SaveDeck.visible = true;
                script_execute(CreateCardListFromDeck);
                script_execute(SetCardInDeckVision);
            
            }
        }
        else        //Убираем карту из колоды
        {
            CardsInDeck -=1;
            var move = false; 
            for (i = 0; i &lt;= 14; i +=1)
            {
                
                if move
                {
                    CardsID[i-1] = CardsID[i];
                    CardsID[i] = 0;
                }
                
                if CardsID[i] = TempID
                {
                    CardsID[i] = 0;
                    move = true;    
                }
                
            } 
            btn_SaveDeck.visible = true;
            script_execute(CreateCardListFromDeck);
            script_execute(SetCardInDeckVision);
                     
        }    
        
    
    }
}




//Записываем выбранную карту в текущую
obj_DeckManager.CardName = CardName; 
obj_DeckManager.CardID = CardID;
obj_DeckManager.CardCost = CardCost;
obj_DeckManager.CardElem = CardElem;
obj_DeckManager.CardSelfTowerHp = CardSelfTowerHp;
obj_DeckManager.CardEnemyTowerHp = CardEnemyTowerHp;
obj_DeckManager.CardNmbAtHand = CardNmbAtHand;

obj_DeckManager.CardSelfRes1 = CardSelfRes1; 
obj_DeckManager.CardSelfRes2 = CardSelfRes2;
obj_DeckManager.CardSelfRes3 = CardSelfRes3;
obj_DeckManager.CardSelfGen1 = CardSelfGen1;
obj_DeckManager.CardSelfGen2 = CardSelfGen2;
obj_DeckManager.CardSelfGen3 = CardSelfGen3;

obj_DeckManager.CardEnemyRes1 = CardEnemyRes1; 
obj_DeckManager.CardEnemyRes2 = CardEnemyRes2;
obj_DeckManager.CardEnemyRes3 = CardEnemyRes3;
obj_DeckManager.CardEnemyGen1 = CardEnemyGen1;
obj_DeckManager.CardEnemyGen2 = CardEnemyGen2;
obj_DeckManager.CardEnemyGen3 = CardEnemyGen3;

obj_DeckManager.CardSelfWallHp = CardSelfWallHp;
obj_DeckManager.CardEnemyWallHp = CardEnemyWallHp;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sp_Card,CardSpIndex, x, y);
draw_set_font(font1);
draw_set_halign(fa_center);
CardNameText = string_replace(CardName, " ", "#");
CardNameText = string_replace(CardNameText, "(newcard)", "");
draw_text(x, y - 60, CardNameText);
draw_text(x - 70, y + 80, CardSelfTowerHp);
draw_text(x + 70, y + 80, CardEnemyTowerHp);

description = ""; 
TextCost = "";

switch (CardElem)
{
  case 1: TextCost = "1: " + string(CardCost); break;
  case 2: TextCost = "2: " + string(CardCost); break;
  case 3: TextCost = "3: " + string(CardCost); break;
}
description += TextCost + "#";

//Формирование описалова
GrSelfRes = false;
GrEnemyRes = false;
GrSelfGen = false;
GrEnemyGen = false;
//РЕСУРСЫ 
if  CardSelfRes1 &lt;&gt; 0 or CardEnemyRes1 &lt;&gt; 0  
{

    if  CardSelfRes1 = CardSelfRes2 
        and CardSelfRes1 = CardSelfRes3 
        and CardSelfRes1 = CardEnemyRes1 
        and CardSelfRes1 = CardEnemyRes2
        and CardSelfRes1 = CardEnemyRes3
    {    
        description += script_execute(GetValueWithPM, CardSelfRes1) + " к ресурсам#всех игроков#"
        GrSelfRes = true;
        GrEnemyRes = true;
        
    }
 
    if  CardSelfRes1 = CardSelfRes2 
        and CardSelfRes1 = CardSelfRes3
        and (CardSelfRes1 &lt;&gt; CardEnemyRes1 or CardSelfRes1 &lt;&gt; CardEnemyRes2 or CardSelfRes1 &lt;&gt; CardEnemyRes3)
        and CardSelfRes1 &lt;&gt; 0
    {    
        description += script_execute(GetValueWithPM, CardSelfRes1) + " к ресурсам#"
        GrSelfRes = true;
    }
    
    if  CardEnemyRes1 = CardEnemyRes2 
        and CardEnemyRes1 = CardEnemyRes3
        and (CardEnemyRes1 &lt;&gt; CardSelfRes1 or CardEnemyRes1 &lt;&gt; CardSelfRes2 or CardEnemyRes1 &lt;&gt; CardSelfRes3)
        and CardEnemyRes1 &lt;&gt; 0
    {    
        description += script_execute(GetValueWithPM, CardEnemyRes1) + " к ресурсам#врага#"
        GrEnemyRes = true;
    }
    
} 

if !GrSelfRes //Если ресурсы не сгруппировались по условиям выше, то добавляем каждый рес. отдельно
{ 
    if CardSelfRes1 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfRes1)+ " к 1 ресурсу #"}
    if CardSelfRes2 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfRes2)+ " к 2 ресурсу #"}
    if CardSelfRes3 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfRes3)+ " к 3 ресурсу #"}
}

if !GrEnemyRes
{
    if CardEnemyRes1 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyRes1)+ " к 1 ресурсу #врага#"}
    if CardEnemyRes2 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyRes2)+ " к 2 ресурсу #врага#"}
    if CardEnemyRes3 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyRes3)+ " к 3 ресурсу #врага#"}
}

//ГЕНЕРАТОРЫ ПРИРОСТ
if  CardSelfGen1 &lt;&gt; 0 or CardEnemyGen1 &lt;&gt; 0  
{

    if  CardSelfGen1 = CardSelfGen2 
        and CardSelfGen1 = CardSelfGen3 
        and CardSelfGen1 = CardEnemyGen1 
        and CardSelfGen1 = CardEnemyGen2
        and CardSelfGen1 = CardEnemyGen3
    {    
        description += script_execute(GetValueWithPM, CardSelfGen1) + " к приросту#всех игроков#"
        GrSelfGen = true;
        GrEnemyGen = true;
        
    }
 
    if  CardSelfGen1 = CardSelfGen2 
        and CardSelfGen1 = CardSelfGen3
        and (CardSelfGen1 &lt;&gt; CardEnemyGen1 or CardSelfGen1 &lt;&gt; CardEnemyGen2 or CardSelfGen1 &lt;&gt; CardEnemyGen3)
        and CardSelfGen1 &lt;&gt; 0
    {    
        description += script_execute(GetValueWithPM, CardSelfGen1) + " к приросту#"
        GrSelfGen = true;
    }
    
    if  CardEnemyGen1 = CardEnemyGen2 
        and CardEnemyGen1 = CardEnemyGen3
        and (CardEnemyGen1 &lt;&gt; CardSelfGen1 or CardEnemyGen1 &lt;&gt; CardSelfGen2 or CardEnemyGen1 &lt;&gt; CardSelfGen3)
        and CardEnemyGen1 &lt;&gt; 0
    {    
        description += script_execute(GetValueWithPM, CardEnemyGen1) + " к приросту#врага#"
        GrEnemyGen = true;
    }
    
} 

if !GrSelfGen
{
    if CardSelfGen1 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfGen1)+ " к 1 приросту#"}
    if CardSelfGen2 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfGen2)+ " к 2 приросту#"}
    if CardSelfGen3 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfGen3)+ " к 3 приросту#"}
}

if !GrEnemyGen
{
    if CardEnemyGen1 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyGen1)+ " к 1 приросту#врага#"}
    if CardEnemyGen2 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyGen2)+ " к 2 приросту#врага#"}
    if CardEnemyGen3 &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyGen3)+ " к 3 приросту#врага#"}
}

if CardSelfWallHp = CardEnemyWallHp and CardSelfWallHp &lt;&gt; 0 
{
    description += script_execute(GetValueWithPM, CardSelfWallHp)+ " ко всем стенам#"    
}
else
{
    if CardSelfWallHp &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardSelfWallHp)+ " к стене#"}
    if CardEnemyWallHp &lt;&gt; 0 {description += script_execute(GetValueWithPM, CardEnemyWallHp) + " к стене врага#"}
}

draw_set_font(font2);
draw_text(x, y, description);




 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
